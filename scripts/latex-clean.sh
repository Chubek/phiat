#!/bin/sh

# Note: this script is not authored by me, thank Qwen 3 Coder for it.
# Since it's generated by AI, it is under no license, so you are free to use it.

# clean-latex.sh - Clean up LaTeX auxiliary files
# Usage: ./clean-latex.sh [directory]
# If no directory is specified, cleans current directory

# Set default directory
DIR="${1:-.}"

# Check if directory exists
if [ ! -d "$DIR" ]; then
    echo "Error: Directory '$DIR' does not exist" >&2
    exit 1
fi

# Define file patterns to remove
# Core LaTeX auxiliary files
AUX_PATTERNS="
*.aux
*.toc
*.lof
*.lot
*.out
*.log
*.bbl
*.blg
*.fdb_latexmk
*.fls
*.synctex.gz
"

# Beamer files
BEAMER_PATTERNS="
*.nav
*.snm
*.vrb
*.thm
"

# Index files
INDEX_PATTERNS="
*.idx
*.ind
*.ilg
"

# Glossary files
GLOSSARY_PATTERNS="
*.glg
*.glo
*.gls
*.acn
*.acr
*.alg
*.glsdefs
"

# Nomenclature files
NOMENCLATURE_PATTERNS="
*.nlg
*.nlo
*.nls
"

# Output files (uncomment if you want to remove PDFs too)
# OUTPUT_PATTERNS="
# *.pdf
# *.dvi
# *.ps
# *.eps
# "

# Minted files
MINTED_PATTERNS="
_minted*
minted-*
*.pytxcode
"

# Pythontex files
PYTHONTEX_PATTERNS="
pythontex-files-*
*.pytxcode
pythontex_*.py
pythontex_*.pyc
"

# Sagetex files
SAGETEX_PATTERNS="
*.sagetex.sage
*.sagetex.sage.py
*.sagetex.scmd
*.sout
*.sage
"

# Knitr files
KNITR_PATTERNS="
*.knit.md
*.utf8.md
figure/
"

# Backup files
BACKUP_PATTERNS="
*~
.*~
*.bak
*.backup
"

# Combine all patterns
ALL_PATTERNS="
$AUX_PATTERNS
$BEAMER_PATTERNS
$INDEX_PATTERNS
$GLOSSARY_PATTERNS
$NOMENCLATURE_PATTERNS
$MINTED_PATTERNS
$PYTHONTEX_PATTERNS
$SAGETEX_PATTERNS
$KNITR_PATTERNS
$BACKUP_PATTERNS
$OUTPUT_PATTERNS
"

# Function to remove files with a specific pattern
remove_files() {
    pattern="$1"
    dir="$2"
    
    # Use find to locate files and handle special characters
    find "$dir" -name "$pattern" -type f -print0 2>/dev/null | \
        while IFS= read -r -d '' file; do
            if rm "$file" 2>/dev/null; then
                echo "Removed file: $file"
            else
                echo "Failed to remove: $file" >&2
            fi
        done
    
    # Handle directories separately
    find "$dir" -name "$pattern" -type d -print0 2>/dev/null | \
        while IFS= read -r -d '' dir_entry; do
            if rm -rf "$dir_entry" 2>/dev/null; then
                echo "Removed directory: $dir_entry"
            else
                echo "Failed to remove directory: $dir_entry" >&2
            fi
        done
}

# Function to clean a directory
clean_directory() {
    clean_dir="$1"
    echo "Cleaning LaTeX artifacts in: $clean_dir"
    
    # Process each pattern
    printf '%s\n' $ALL_PATTERNS | while IFS= read -r pattern; do
        # Skip empty lines
        case "$pattern" in
            ''|*[[:space:]]*) continue ;;
        esac
        
        remove_files "$pattern" "$clean_dir"
    done
}

# Function to clean with confirmation for output files
clean_with_confirmation() {
    target_dir="$1"
    
    # Clean regular files first
    clean_directory "$target_dir"
    
    # If output patterns are defined, ask for confirmation
    if [ -n "$OUTPUT_PATTERNS" ]; then
        echo ""
        echo "The following output files will be removed:"
        printf '%s\n' $OUTPUT_PATTERNS | while IFS= read -r pattern; do
            case "$pattern" in
                ''|*[[:space:]]*) continue ;;
            esac
            find "$target_dir" -name "$pattern" -type f 2>/dev/null
        done
        
        printf "\nDo you want to remove these output files as well? (y/N): "
        read -r response
        case "$response" in
            [yY]|[yY][eE][sS])
                printf '%s\n' $OUTPUT_PATTERNS | while IFS= read -r pattern; do
                    case "$pattern" in
                        ''|*[[:space:]]*) continue ;;
                    esac
                    remove_files "$pattern" "$target_dir"
                done
                ;;
            *)
                echo "Output files will be preserved."
                ;;
        esac
    fi
}

# Main execution
if [ "$#" -eq 0 ]; then
    # No arguments - clean current directory
    clean_with_confirmation "."
elif [ "$#" -eq 1 ] && [ "$1" = "--help" ]; then
    echo "Usage: $0 [DIRECTORY]"
    echo "Clean up LaTeX auxiliary files in the specified directory."
    echo "If no directory is specified, cleans the current directory."
    echo ""
    echo "Options:"
    echo "  --help     Show this help message"
    echo "  --all      Remove output files (PDF, DVI, etc.) as well"
    echo ""
    echo "Note: This script will not remove files in subdirectories"
    echo "unless they match the specified patterns."
    exit 0
elif [ "$#" -eq 1 ] && [ "$1" = "--all" ]; then
    # Include output files in cleaning
    OUTPUT_PATTERNS="
    *.pdf
    *.dvi
    *.ps
    *.eps
    "
    clean_with_confirmation "."
elif [ "$#" -eq 2 ] && [ "$1" = "--all" ]; then
    OUTPUT_PATTERNS="
    *.pdf
    *.dvi
    *.ps
    *.eps
    "
    clean_with_confirmation "$2"
else
    # Clean specified directory
    clean_with_confirmation "$1"
fi

echo "LaTeX cleanup completed."

To use this script:

1. Save it as `clean-latex.sh`
2. Make it executable: `chmod +x clean-latex.sh`
3. Run it:
   ```bash
   # Clean current directory
   ./clean-latex.sh
   
   # Clean specific directory
   ./clean-latex.sh /path/to/latex/project
   
   # Clean and remove output files too
   ./clean-latex.sh --all
   
   # Get help
   ./clean-latex.sh --help

